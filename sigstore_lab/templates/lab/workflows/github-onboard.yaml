{{ if eq .Values.gittype "github" }}
---
apiVersion: openunison.tremolo.io/v1
kind: Workflow
metadata:
  name: github-onboard
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: openunison
    app.kubernetes.io/instance: openunison-orchestra
    app.kubernetes.io/component: openunison-workflows
    app.kubernetes.io/part-of: openunison
spec:
  description: JIT - Generate User Namespace in GitHub
  inList: false
  label: JIT - Generate User Namespace in GitHub
  orgId: 687da09f-8ec1-48ac-b035-f2f182b9bd1e
  dynamicConfiguration:
    dynamic: false
    className: ""
    params: []
  tasks: |-
      # create github team
      - taskType: customTask
        className: com.tremolosecurity.provisioning.customTasks.AddGroupToStore
        params:
          target: github
          name: admin-$github_user$-workshop
          attributes: []

      - taskType: mapping
        strict: true
        map:
          - targetAttributeName: sub
            sourceType: user
            targetAttributeSource: uid
        onSuccess:
        - taskType: customTask
          className: com.tremolosecurity.provisioning.customTasks.ClearGroups
          params: {}
          
        - taskType: addGroup
          name: admin-$github_user$-workshop
          remove: false

        - taskType: provision
          sync: false
          target: github
          setPassword: false
          onlyPassedInAttributes: true
          attributes:
          - sub
      
      - taskType: customTask
        className: com.tremolosecurity.provisioning.customTasks.github.CreateGithubRepo
        params:
          targetName: github
          name: $github_user$-workshop-application
          description: project for supplychain workshop
          team: admin-$github_user$-workshop

      - taskType: customTask
        className: com.tremolosecurity.provisioning.customTasks.github.AddTeamToRepo
        params:
          targetName: github
          teamName: admin-$github_user$-workshop
          repoName: $github_user$-workshop-application
          permission: admin

      - taskType: customTask
        className: com.tremolosecurity.provisioning.customTasks.github.CreateGitFile
        params:
          targetName: github
          repository: $github_user$-workshop-application
          branch: main
          commitMessage: initial create
          path: source/Dockerfile
          content: |-
            FROM python:buster

            RUN groupadd -r microsvc -g 433 && \
                mkdir /usr/local/microsvc && \
                useradd -u 431 -r -g microsvc -d /usr/local/microsvc -s /sbin/nologin -c "Micro Service User" microsvc

            ADD requirements.txt /usr/local/microsvc/requirements.txt
            ADD helloworld.py /usr/local/microsvc/helloworld.py

            WORKDIR /usr/local/microsvc


            RUN pip3 install -r ./requirements.txt

            USER 431

            CMD ["python3","helloworld.py"]

      - taskType: customTask
        className: com.tremolosecurity.provisioning.customTasks.github.CreateGitFile
        params:
          targetName: github
          repository: $github_user$-workshop-application
          branch: main
          commitMessage: initial create
          path: source/helloworld.py
          content: |-
            from flask import Flask
            import os
            import socket
            import json

            app = Flask(__name__)

            @app.route('/')
            def hello():
                retVal = {
                    "msg":"hello world!",
                    "host":"%s" % socket.gethostname()

                }
                return json.dumps(retVal)

            if __name__ == "__main__":
                app.run(host="0.0.0.0", port=8080, debug=True)

      - taskType: customTask
        className: com.tremolosecurity.provisioning.customTasks.github.CreateGitFile
        params:
          targetName: github
          repository: $github_user$-workshop-application
          branch: main
          commitMessage: initial create
          path: source/requirements.txt
          content: |-
            flask

      - taskType: customTask
        className: com.tremolosecurity.provisioning.customTasks.JavaScriptTask
        params:
          javaScript: |-
            
            function init(task,params) {
              // nothing to do
            }

            function reInit(task) {
              // do nothing
            }

            function doTask(user,request) {
              request.put("AWS_ROLE","${{ "{{" }} secrets.AWS_ROLE {{ "}}" }}");
              request.put("SESSION_NAME","${{ "{{" }} secrets.SESSION_NAME {{ "}}" }}");
              request.put("DEPLOY_KEY_X","${{ "{{" }} secrets.DEPLOY_KEY {{ "}}" }}");
              request.put("PATCH",'{\\"spec\\":{\\"template\\":{\\"spec\\":{\\"containers\\":[{\\"name\\":\\"pause\\",\\"image\\":\\"{{ .Values.sigstore_lab.aws.ecr_repo }}:${GITHUB_REPOSITORY#*/}-$GITHUB_SHA\\"}]}}}}');
              request.put("DOCKER_REPO",'{{ .Values.sigstore_lab.aws.ecr_repo }}:${GITHUB_REPOSITORY#*/}-$GITHUB_SHA');
              return true;
            }

      - taskType: customTask
        className: com.tremolosecurity.provisioning.customTasks.github.CreateGitFile
        params:
          targetName: github
          repository: $github_user$-workshop-application
          branch: main
          commitMessage: initial create
          path: .github/workflows/build_and_deploy.yaml
          content: |-
            name: Build and deploy container
            on:
              push:
                branches: [ "main" ]
            permissions:
              id-token: write
              contents: read    
            jobs:
              build:
                runs-on: ubuntu-20.04
                steps:
                  # Setup the build environment
                  - uses: actions/checkout@v2

                  - uses: actions/setup-go@v2

                  - name: Set up QEMU
                    uses: docker/setup-qemu-action@v1

                  - name: Set up Docker Buildx
                    uses: docker/setup-buildx-action@v1

                  - name: Install Cosign
                    uses: sigstore/cosign-installer@main

                  # Build our container
                  - run: docker build --tag=$DOCKER_REPO$ ./source
                  
                  # Login to AWS
                  #- uses: aws-actions/configure-aws-credentials@v1
                  #  with:
                  #    role-to-assume: $AWS_ROLE$
                  #    role-session-name: $SESSION_NAME$
                  #    aws-region: us-east-1
                  
                  # Get docker credentials
                  #- name: Login to Amazon ECR Private
                  #  id: login-ecr
                  #  uses: aws-actions/amazon-ecr-login@v1
                  #  with: 
                  #    registry-type: public
                  

                  
                  # Push to our registry
                  - run: docker push $DOCKER_REPO$

                  # Sign our image using the GitHub OIDC Token
                  #- name: Sign image with GitHub OIDC
                  #  run: |-
                  #     COSIGN_EXPERIMENTAL=1 cosign sign $DOCKER_REPO$

                  # Check out our application's infrastructure repository
                  - uses: actions/checkout@v3
                    with:
                      repository: {{ .Values.sigstore_lab.github.org }}/$github_user$-workshop-infrastructure
                      ssh-key: $DEPLOY_KEY_X$
                      fetch-depth: 0
                      
                  # Patch the Deployment with the new image
                  - run: |-
                                git pull
                                git config user.name github-actions
                                git config user.email github-actions@github.com
                                
                                kubectl patch --local -f yaml/deployments/run-service.yaml -p "$PATCH$" -o yaml > /tmp/hello-python.yaml
                                cp /tmp/hello-python.yaml yaml/deployments/run-service.yaml
                                git add yaml/deployments/run-service.yaml
                                git commit -m "commit automated build from commit \$GITHUB_SHA"
                                git push

      - taskType: customTask
        className: com.tremolosecurity.provisioning.customTasks.github.CreateGithubRepo
        params:
          targetName: github
          name: $github_user$-workshop-infrastructure
          description: project for supplychain workshop
          team: admin-$github_user$-workshop

      - taskType: customTask
        className: com.tremolosecurity.provisioning.customTasks.github.AddTeamToRepo
        params:
          targetName: github
          teamName: admin-$github_user$-workshop
          repoName: $github_user$-workshop-infrastructure
          permission: admin

      - taskType: customTask
        className: com.tremolosecurity.provisioning.customTasks.github.CreateGitFile
        params:
          targetName: github
          repository: $github_user$-workshop-infrastructure
          branch: main
          commitMessage: Setup ns scratchpad
          path: yaml/deployments/scratchpad.yaml
          content: |-
              ---
              kind: Deployment
              apiVersion: apps/v1
              metadata:
                name: scrathpad
                namespace: "$namespaceName$"
                labels:
                  app: scrathpad
              spec:
                replicas: 1
                selector:
                  matchLabels:
                    app: scrathpad
                template:
                  metadata:
                    creationTimestamp: null
                    labels:
                      app: scrathpad
                  spec:
                    containers:
                      - name: scratchpad
                        image: {{ .Values.sigstore_lab.scratchpad_image }}
                        resources: {}
                        terminationMessagePath: /dev/termination-log
                        terminationMessagePolicy: File
                        imagePullPolicy: IfNotPresent
                    restartPolicy: Always
                    terminationGracePeriodSeconds: 30
                    dnsPolicy: ClusterFirst
                    securityContext: {}
                    schedulerName: default-scheduler
                strategy:
                  type: RollingUpdate
                  rollingUpdate:
                    maxUnavailable: 25%
                    maxSurge: 25%
                revisionHistoryLimit: 10
                progressDeadlineSeconds: 600
              

      - taskType: customTask
        className: com.tremolosecurity.provisioning.customTasks.github.CreateGitFile
        params:
          targetName: github
          repository: $github_user$-workshop-infrastructure
          branch: main
          commitMessage: Setup ns deployment
          path: yaml/deployments/run-service.yaml
          content: |-
            ---
            metadata:
              name: "run-service"
              namespace: "$namespaceName$"
              labels:
                app: "run-service"
            apiVersion: "apps/v1"
            kind: "Deployment"
            spec:
              template:
                metadata:
                  creationTimestamp: null
                  labels:
                    app: "run-service"
                spec:
                  dnsPolicy: "ClusterFirst"
                  terminationGracePeriodSeconds: 30
                  containers:
                  - image: "{{ .Values.sigstore_lab.pause_image }}"
                    imagePullPolicy: "Always"
                    terminationMessagePolicy: "File"
                    terminationMessagePath: "/dev/termination-log"
                    name: "pause"
                    resources: {}
                  securityContext: {}
                  restartPolicy: "Always"
                  schedulerName: "default-scheduler"
              replicas: 1
              selector:
                matchLabels:
                  app: "run-service"
              revisionHistoryLimit: 10
              strategy:
                type: "RollingUpdate"
                rollingUpdate:
                  maxSurge: "25%"
                  maxUnavailable: "25%"
              progressDeadlineSeconds: 600
      
      - taskType: ifAttrHasValue
        name: $github_user$-workshop-infrastructure-key-created
        value: "true"
        onSuccess:
        - taskType: customTask
          className: com.tremolosecurity.provisioning.customTasks.github.CreateSecret
          params:
            targetName: github
            repoName: $github_user$-workshop-application
            name: AWS_ROLE
            value: "{{ .Values.sigstore_lab.aws.role }}"

        - taskType: customTask
          className: com.tremolosecurity.provisioning.customTasks.github.CreateSecret
          params:
            targetName: github
            repoName: $github_user$-workshop-application
            name: SESSION_NAME
            value: "build-$sub$"
            
        - taskType: customTask
          className: com.tremolosecurity.provisioning.customTasks.github.CreateDeploymentKey
          params:
            targetName: github
            repo: $github_user$-workshop-infrastructure
            keyLabel: infrastructure-update
            makeWriteable: "true"
            privateKeyReuestName: "infraSshKeyB64"
            privateKeyReuestNamePT: "infraSshKey"

        - taskType: customTask
          className: com.tremolosecurity.provisioning.customTasks.github.CreateSecret
          params:
            targetName: github
            repoName: $github_user$-workshop-application
            name: DEPLOY_KEY
            value: "$gitPrivateKey$"
{{ end }}