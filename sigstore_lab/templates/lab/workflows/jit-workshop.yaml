---
apiVersion: openunison.tremolo.io/v1
kind: Workflow
metadata:
  name: jit-workshop
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: openunison
    app.kubernetes.io/instance: openunison-orchestra
    app.kubernetes.io/component: openunison-workflows
    app.kubernetes.io/part-of: openunison
spec:
  description: JIT - Generate User Namespace
  inList: false
  label: JIT - Generate User Namespace
  orgId: 687da09f-8ec1-48ac-b035-f2f182b9bd1e
  dynamicConfiguration:
    dynamic: false
    className: ""
    params: []
  tasks: |-
      # Map the user's uid to something that can be used
      # as a namespace
      - taskType: customTask
        className: com.tremolosecurity.provisioning.customTasks.JavaScriptTask
        params:
          javaScript: |-
            // Maps external groups to local groups
            System = Java.type("java.lang.System");
            DN = Java.type("com.novell.ldap.util.DN");
            Attribute = Java.type("com.tremolosecurity.saml.Attribute");
            SetupGroupMetadataWatch = Java.type("com.tremolosecurity.proxy.filters.SetupGroupMetadataWatch");
            HashMap = Java.type("java.util.HashMap");

            function init(task,params) {
              // nothing to do
            }

            function reInit(task) {
              // do nothing
            }

            function doTask(user,request) {
               
            
               uid = user.getAttribs().get("uid").getValues().get(0);
               
               var namespaceName = "";

               for (var i=0;i<uid.length;i++) {
                 var c = uid.charAt(i);
                 if ( ((c >= 'a') && (c <= 'z')) || ((c >= 'A') && (c <= 'Z')) || ((c >= '0') && (c <= '9')) ) {
                   namespaceName = namespaceName + c;
                 } else if (c == '-') {
                   if (i == 0 || i == (uid.length - 1)) {
                     namespaceName = namespaceName + 'x-' + c.charCodeAt(0) + '-x';
                   } else {
                     namespaceName = namespaceName + c;
                   }
                 } else {
                   namespaceName = namespaceName + 'x-' + c.charCodeAt(0) + '-x';
                 }
               }

               namespaceName = "user-ns-" + namespaceName.toLowerCase();
               
               request.put("namespaceName",namespaceName);
               request.put("github_user",uid);

               return true;
            }

      # create the group that will have admin access to the new namespace
      - taskType: customTask
        className: com.tremolosecurity.provisioning.customTasks.AddGroupToStore
        params:
          target: jitdb
          name: k8s-namespace-administrators-k8s-k8s-$namespaceName$
          attributes:
          - unison.group.create.sql=INSERT INTO localGroups (name,description) VALUES (?,?)
          - unison.group.create.param.2=View kubernetes namespace $namespaceName$
          
      # add the admin group to the logged in user
      - taskType: addGroup
        name: k8s-namespace-administrators-k8s-k8s-$namespaceName$
      
      # provision the new group to the user
      - taskType: provision
        sync: false
        target: jitdb
        setPassword: false
        onlyPassedInAttributes: true
        attributes:
        - sub
      # Create the namespace, this is an idempotent operation
      - taskType: customTask
        className: com.tremolosecurity.provisioning.tasks.CreateK8sObject
        params:
          targetName: k8s
          template: |-
            kind: Namespace
            apiVersion: v1
            metadata:
              name: "$namespaceName$"
              labels:
                name: "$namespaceName$"
                policy.sigstore.dev/include: "true"
          kind: Namespace
          url: /api/v1/namespaces
          srcType: yaml
      # create the RoleBinding, this is an idempotent operation
      - taskType: customTask
        className: com.tremolosecurity.provisioning.tasks.CreateK8sObject
        params:
          targetName: k8s
          template: |-
            kind: RoleBinding
            apiVersion: rbac.authorization.k8s.io/v1
            metadata:
              name: admins-binding
              namespace: "$namespaceName$"
            subjects:
            - kind: Group
              name: k8s-namespace-administrators-k8s-k8s-$namespaceName$
              apiGroup: rbac.authorization.k8s.io
            - kind: ServiceAccount
              name: default
              namespace: "$namespaceName$"
            roleRef:
              kind: ClusterRole
              name: admin
              apiGroup: rbac.authorization.k8s.io
          kind: RoleBinding
          url: /apis/rbac.authorization.k8s.io/v1/namespaces/$namespaceName$/rolebindings
          srcType: yaml
      
      # refresh the user's internal authenticated object
      - taskType: resync
        keepExternalAttrs: false
        changeRoot: true
        newRoot: o=Tremolo

      
      - taskType: callWorkflow
        name: {{ .Values.gittype }}-onboard
      

      - taskType: ifAttrHasValue
        name: $github_user$-workshop-infrastructure-key-created
        value: "true"
        onSuccess:

        # create a git repo in argocd that is connected to our operations project in gitlab
        - taskType: customTask
          className: com.tremolosecurity.argocd.tasks.CreateGitRepository
          params:
            type: git
            name: $namespaceName$
            repoUrl: "$gitSshUrl$"
            sshPrivateKey: $gitPrivateKey$
            target: argocd 
        
        # create argocd project
        - taskType: customTask
          className: com.tremolosecurity.provisioning.tasks.CreateK8sObject
          params:
            targetName: k8s
            kind: AppProject
            srcType: yaml
            url: /apis/argoproj.io/v1alpha1/namespaces/argocd/appprojects
            template: |-
              apiVersion: argoproj.io/v1alpha1
              kind: AppProject
              metadata:
                name: $namespaceName$
                namespace: argocd
              spec:
                description: Project for $namespaceName$
                destinations:
                  - namespace: $namespaceName$
                    server: https://kubernetes.default.svc
                sourceRepos:
                  - $gitSshUrl$
                  
        # create applications
        - taskType: customTask
          className: com.tremolosecurity.provisioning.tasks.CreateK8sObject
          params:
            targetName: k8s
            kind: Application
            srcType: yaml
            url: /apis/argoproj.io/v1alpha1/namespaces/argocd/applications
            template: |-
              apiVersion: argoproj.io/v1alpha1
              kind: Application
              metadata:
                name: $namespaceName$
                namespace: argocd
              spec:
                destination:
                  namespace: $namespaceName$
                  server: https://kubernetes.default.svc
                project: $namespaceName$
                source:
                  directory:
                    jsonnet: {}
                    recurse: true
                  path: yaml
                  repoURL: $gitSshUrl$
                  targetRevision: HEAD
                syncPolicy:
                  automated: {}

        # create applications
        - taskType: customTask
          className: com.tremolosecurity.argocd.tasks.AddtoRBAC
          params:
            k8sTarget: k8s
            toAdd: |-
              p, role:k8s-namespace-administrators-k8s-$namespaceName$, applications, get, $namespaceName$/*, allow
              p, role:k8s-namespace-administrators-k8s-$namespaceName$, applications, override, $namespaceName$/*, allow
              p, role:k8s-namespace-administrators-k8s-$namespaceName$, applications, sync, $namespaceName$/*, allow
              p, role:k8s-namespace-administrators-k8s-$namespaceName$, applications, update, $namespaceName$/*, allow
              
              p, role:k8s-namespace-administrators-k8s-$namespaceName$, projects, get, $namespaceName$, allow
              
              g, k8s-namespace-administrators-k8s-k8s-$namespaceName$, role:k8s-namespace-administrators-k8s-$namespaceName$
              
      